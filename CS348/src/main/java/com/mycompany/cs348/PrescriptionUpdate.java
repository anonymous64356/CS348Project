/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.cs348;

import com.github.lgooddatepicker.components.DatePickerSettings;
import com.github.lgooddatepicker.optionalusertools.CalendarListener;
import com.github.lgooddatepicker.optionalusertools.DateHighlightPolicy;
import com.github.lgooddatepicker.optionalusertools.DateVetoPolicy;
import com.github.lgooddatepicker.zinternaltools.CalendarSelectionEvent;
import com.github.lgooddatepicker.zinternaltools.HighlightInformation;
import com.github.lgooddatepicker.zinternaltools.YearMonthChangeEvent;
import static com.mycompany.cs348.CS348.conn;
import static com.mycompany.cs348.CS348.getResultFromQuery;
import java.awt.Color;
import java.awt.Window;
import java.sql.CallableStatement;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Joseph Murphy
 */
public class PrescriptionUpdate extends javax.swing.JFrame {

    /**
     * Creates new form PrescriptionUpdate
     */
    //
    private ArrayList<Object[]> patientResult;
    private Object[] prescriptionInfo;
    private String medicineName;
    private ArrayList<String> medicineNames = new ArrayList();
    private ArrayList<String> medicineIDs = new ArrayList();
    private String previousMedicineIDText = "";
    private boolean isRefill;
    
    public PrescriptionUpdate(Object[] prescriptionInfo, boolean isRefill, String medicineName, ArrayList<Object[]> patientResult) {
        this.prescriptionInfo = prescriptionInfo;
        this.medicineName = medicineName;
        this.isRefill = isRefill;
        this.patientResult = patientResult;
        initComponents();
        
        LocalDate lastFilled;
        DatePickerSettings settings = calendar.getSettings();
        //if lastFilled and nextFill are equal, the prescription is brand new, so frequency doesn't matter
        if (prescriptionInfo[7] == null) {
            lastFilled = LocalDate.now();
            calendar.addCalendarListener(new PrescriptionCalendarListener(lastFilled.minusDays(1), refillDateField));
        } else {
            lastFilled = ((Date)(prescriptionInfo[7])).toLocalDate();
            calendar.addCalendarListener(new PrescriptionCalendarListener(lastFilled, refillDateField));
            settings.setHighlightPolicy(new PrescriptionHighlightPolicy(lastFilled, ((Date)(prescriptionInfo[8])).toLocalDate()));
        }
        settings.setVetoPolicy(new PrescriptionDateVetoPolicy(lastFilled, ((Integer)prescriptionInfo[6])));
        settings.setVisiblePreviousYearButton(false);
        settings.setVisibleNextYearButton(false);
        
        if (isRefill) {
            costField.setEditable(false);
            frequencyField.setEditable(false);
            medicineIDField.setEditable(false);
            medicineNameField.setEditable(false);
            quantityField.setEditable(false);
        } else {
            quantityField.setText("");
            costField.setText("");
            frequencyField.setText("");
            ResultSet allMedicine = getResultFromQuery("SELECT * FROM medicine");
            try {
                while (allMedicine.next()) {
                    medicineNames.add(allMedicine.getString("name"));
                    medicineIDs.add(allMedicine.getString("medicineID"));
                }
            } catch (SQLException ex) {
                Logger.getLogger(PrescriptionGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            medicineNameField.setModel(new DefaultComboBoxModel(medicineNames.toArray()));
            medicineNameFieldActionPerformed(null);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        medicineIDField = new javax.swing.JTextField();
        medicineNameField = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        quantityField = new javax.swing.JTextField();
        costField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        calendar = new com.github.lgooddatepicker.components.CalendarPanel();
        jLabel7 = new javax.swing.JLabel();
        frequencyField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        refillDateField = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTextField1.setEditable(false);
        jTextField1.setText((String) prescriptionInfo[1]);

        jTextField2.setEditable(false);
        jTextField2.setText((String) prescriptionInfo[2]);

        medicineIDField.setText((String)prescriptionInfo[3]);
        medicineIDField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                medicineIDFieldFocusLost(evt);
            }
        });

        medicineNameField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { (String)medicineName }));
        medicineNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medicineNameFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Medicine Name:");

        jLabel2.setText("Medicine ID:");

        jLabel3.setText("Quantity:");

        quantityField.setText(Integer.toString((Integer)prescriptionInfo[4]));

        costField.setText("$" + (Double)prescriptionInfo[5]);

        jLabel4.setText("Cost:");

        jLabel5.setText("Employee ID:");

        jLabel6.setText("Patient ID:");

        calendar.setOpaque(false);

        jLabel7.setText("Frequency (Days):");

        frequencyField.setText(Integer.toString((Integer)prescriptionInfo[6]));

        jLabel8.setText("Refill Date:");

        refillDateField.setEditable(false);
        refillDateField.setText("Pick on Calendar");
        refillDateField.setAlignmentX(1.0F);
        refillDateField.setAlignmentY(1.0F);

        submitButton.setText("Submit");
        submitButton.setToolTipText("");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(frequencyField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel8))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(refillDateField, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                                            .addComponent(medicineNameField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(quantityField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(costField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(medicineIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(25, 25, 25))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(calendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(medicineIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(costField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(medicineNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(calendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(refillDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(frequencyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
        if (isRefill) {
            try {
                PreparedStatement statement = conn.prepareStatement("UPDATE prescription SET nextFill = ? WHERE prescriptionID = ?");
                statement.setDate(1, Date.valueOf(refillDateField.getText()));
                statement.setInt(2, Integer.parseInt((String)prescriptionInfo[0]));
                statement.executeUpdate();
                JOptionPane.showConfirmDialog(rootPane, "Prescription Updated", "Success", JOptionPane.DEFAULT_OPTION);
                JComponent comp = (JComponent) evt.getSource();
                Window win = SwingUtilities.getWindowAncestor(comp);
                win.dispose();
            } catch (Exception e) {
                Logger.getLogger(PrescriptionGUI.class.getName()).log(Level.SEVERE, null, e);
                JOptionPane.showMessageDialog(rootPane, "Error with updating prescription. Check date and try again", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            try {
                int medicineID = Integer.parseInt(medicineIDField.getText());
                for (int i = 0; i < patientResult.size(); i++) { //check for interactions with patient's other medicines
                    int otherMedicineID = Integer.parseInt((String)patientResult.get(i)[3]);
                    String query;
                    if (otherMedicineID > medicineID)
                        query = String.format(
                            "SELECT * FROM interaction WHERE medicineID1 = %d AND medicineID2 = %d", medicineID, otherMedicineID);
                    else
                        query = String.format(
                            "SELECT * FROM interaction WHERE medicineID1 = %d AND medicineID2 = %d", otherMedicineID, medicineID);
                    ResultSet interactionResult = getResultFromQuery(query);
                    if (interactionResult.isBeforeFirst()) { //if any rows exist, an interaction between the drugs exist
                        ResultSet drugName = getResultFromQuery("SELECT name FROM medicine WHERE medicineID = " + otherMedicineID);
                        drugName.next();
                        interactionResult.next();
                        String message = String.format("WARNING:\nPatient is also prescribed %s, which is known to cause this interaction with %s:\n\n%s\n\nDo you want to continue?"
                                , drugName.getString("name"), ((String)medicineNameField.getSelectedItem()).trim(), interactionResult.getString("interaction"));
                        int reply = JOptionPane.showConfirmDialog(rootPane, message, "Interaction Warning", JOptionPane.YES_NO_OPTION);
                        if (reply == JOptionPane.NO_OPTION)
                            return;
                    }
                }
                
                //same layout as prescription info, except without prescriptionID (first value)
                CallableStatement statement = conn.prepareCall("{CALL createPatientPrescription(?,?,?,?,?,?,?,?)}");
                statement.setInt(1, Integer.parseInt((String)prescriptionInfo[1])); 
                statement.setInt(2, Integer.parseInt((String)prescriptionInfo[2]));
                medicineNameFieldActionPerformed(null); //make sure this is run so medicine name and ID are synced
                statement.setInt(3, medicineID);
                statement.setInt(4, Integer.parseInt(quantityField.getText()));
                String costText = costField.getText().strip();
                if (costText.charAt(0) == '$')
                    costText = costText.substring(1);
                statement.setDouble(5, Double.parseDouble(costText));
                statement.setInt(6, Integer.parseInt(frequencyField.getText()));
                statement.setDate(7, Date.valueOf(refillDateField.getText()));
                statement.setDate(8, Date.valueOf(LocalDate.parse(refillDateField.getText()).plusDays(Integer.parseInt(frequencyField.getText()))));
                statement.execute();
                statement.close();
                JOptionPane.showConfirmDialog(rootPane, "New prescription created", "Success", JOptionPane.DEFAULT_OPTION);
                JComponent comp = (JComponent) evt.getSource();
                Window win = SwingUtilities.getWindowAncestor(comp);
                win.dispose();
            } catch (Exception e) {
                Logger.getLogger(PrescriptionGUI.class.getName()).log(Level.SEVERE, null, e);
                JOptionPane.showMessageDialog(rootPane, "Error with creating prescription. Check fields and try again", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_submitButtonActionPerformed

    private void medicineNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medicineNameFieldActionPerformed
        // TODO add your handling code here:
        previousMedicineIDText = medicineIDs.get(medicineNameField.getSelectedIndex());
        medicineIDField.setText(previousMedicineIDText);
    }//GEN-LAST:event_medicineNameFieldActionPerformed

    private void medicineIDFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_medicineIDFieldFocusLost
        // TODO add your handling code here:
        if (!medicineIDField.getText().equals(previousMedicineIDText)) {
            int index = medicineIDs.indexOf(medicineIDField.getText());
            if (index != -1)
                medicineNameField.setSelectedIndex(index);
        }
    }//GEN-LAST:event_medicineIDFieldFocusLost
    
    private static class PrescriptionDateVetoPolicy implements DateVetoPolicy {
        LocalDate lastFilled;
        int frequency;
        public PrescriptionDateVetoPolicy(LocalDate lastFilled, int frequency) {
            this.lastFilled = lastFilled;
            this.frequency = frequency;
        }
        @Override
        public boolean isDateAllowed(LocalDate date) {
          // Disallow days less than lastFilled
          if (date.isBefore(lastFilled))
            return false;
          else if (date.isEqual(lastFilled)) //allow lastFilled for highlighting
              return true;
          else if (date.isBefore(lastFilled.plusDays(frequency))) //disallow dates between lastFilled and frequency
              return false;
          else if (date.isAfter(date.plusYears(1))) //disallow more than one year out
              return false;
          // Allow all other days.
          return true;
        }
      }
    
    private static class PrescriptionCalendarListener implements CalendarListener {
        LocalDate lastFilled;
        javax.swing.JTextField refillDateField;
        public PrescriptionCalendarListener(LocalDate lastFilled, javax.swing.JTextField refillDateField) {
            this.lastFilled = lastFilled;
            this.refillDateField = refillDateField;
        }
        @Override
        public void selectedDateChanged(CalendarSelectionEvent event) {
            if (event.getNewDate().equals(lastFilled))
                refillDateField.setText("Previous Fill Date");
            else
                refillDateField.setText(event.getNewDate().toString());
        }
        
        @Override
        public void yearMonthChanged(YearMonthChangeEvent event) {
            
        }
    }
    
    private static class PrescriptionHighlightPolicy implements DateHighlightPolicy {
        LocalDate lastFilled;
        LocalDate nextFill;
        public PrescriptionHighlightPolicy(LocalDate lastFilled, LocalDate nextFill) {
            this.lastFilled = lastFilled;
            this.nextFill = nextFill;
        }
        @Override
        public HighlightInformation getHighlightInformationOrNull(LocalDate date) {
          if (date.equals(lastFilled))
                return new HighlightInformation(Color.cyan, null, "Previous Fill Date");
          else if (date.equals(nextFill))
                return new HighlightInformation(Color.yellow, null, "Next Fill Date");
          return null;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.CalendarPanel calendar;
    private javax.swing.JTextField costField;
    private javax.swing.JTextField frequencyField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField medicineIDField;
    private javax.swing.JComboBox<String> medicineNameField;
    private javax.swing.JTextField quantityField;
    private javax.swing.JTextField refillDateField;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
}


